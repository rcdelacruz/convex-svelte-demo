#!/usr/bin/env node

/**
 * Deployment Management Script for Convex + SvelteKit + Cloudflare Workers
 *
 * Usage:
 *   npm run deploy:local     # Deploy to local development
 *   npm run deploy:staging   # Deploy to staging environment
 *   npm run deploy:prod      # Deploy to production environment
 *   npm run deploy:convex    # Deploy only Convex functions
 *   npm run deploy:cf        # Deploy only to Cloudflare Workers
 */

import { execSync } from 'child_process';
import { writeFileSync } from 'fs';

// Environment configurations
const ENVIRONMENTS = {
  local: {
    name: 'Local Development',
    convexUrl: process.env.LOCAL_CONVEX_URL || 'http://localhost:3210',
    convexAdminKey: process.env.LOCAL_CONVEX_ADMIN_KEY || '',
    cfEnv: '',
    skipCfDeploy: true,
    autoStartConvex: true
  },
  staging: {
    name: 'Staging',
    convexUrl: process.env.STAGING_CONVEX_URL || '',
    convexAdminKey: process.env.STAGING_CONVEX_ADMIN_KEY || '',
    cfEnv: 'staging',
    skipCfDeploy: false,
    autoStartConvex: false
  },
  prod: {
    name: 'Production',
    convexUrl: process.env.PROD_CONVEX_URL || 'https://backend-ew0s84sgw8wswwso8gsg8gg8.rcdc.me',
    convexAdminKey: process.env.PROD_CONVEX_ADMIN_KEY || 'self-hosted-convex|01cb8fac9fa020cafc17e43649a768856b7ebbdddddd9a1d775e48b61072e993d8562a529cec49948d9abe5c046715725a',
    cfEnv: 'production',
    skipCfDeploy: false,
    autoStartConvex: false
  }
};

class DeploymentManager {
  constructor() {
    this.args = process.argv.slice(2);
    this.command = this.args[0];
    this.environment = this.args[1] || 'local';
    this.flags = this.parseFlags();
  }

  parseFlags() {
    const flags = {};
    this.args.forEach(arg => {
      if (arg.startsWith('--')) {
        const [key, value] = arg.slice(2).split('=');
        flags[key] = value || true;
      }
    });
    return flags;
  }

  log(message, type = 'info') {
    const colors = {
      info: '\x1b[36m',    // Cyan
      success: '\x1b[32m', // Green
      warning: '\x1b[33m', // Yellow
      error: '\x1b[31m',   // Red
      reset: '\x1b[0m'
    };

    const timestamp = new Date().toLocaleTimeString();
    console.log(`${colors[type]}[${timestamp}] ${message}${colors.reset}`);
  }

  exec(command, options = {}) {
    this.log(`Executing: ${command}`);
    try {
      const result = execSync(command, {
        stdio: options.silent ? 'pipe' : 'inherit',
        encoding: 'utf8',
        ...options
      });
      return result;
    } catch (error) {
      this.log(`Command failed: ${error.message}`, 'error');
      if (!options.continueOnError) {
        process.exit(1);
      }
      return null;
    }
  }

  validateEnvironment(env) {
    const config = ENVIRONMENTS[env];
    if (!config) {
      this.log(`Invalid environment: ${env}. Available: ${Object.keys(ENVIRONMENTS).join(', ')}`, 'error');
      process.exit(1);
    }

    if (!config.skipCfDeploy && !config.convexUrl) {
      this.log(`Missing CONVEX_URL for ${env} environment`, 'error');
      process.exit(1);
    }

    if (!config.skipCfDeploy && !config.convexAdminKey) {
      this.log(`Missing CONVEX_ADMIN_KEY for ${env} environment`, 'error');
      process.exit(1);
    }

    return config;
  }

  updateEnvFile(env) {
    const config = ENVIRONMENTS[env];
    const envFile = env === 'local' ? '.env.local' : `.env.${env}`;

    const envContent = `# ${config.name} Environment Configuration
# Generated by deployment script on ${new Date().toISOString()}

# Convex Configuration
CONVEX_SELF_HOSTED_URL='${config.convexUrl}'
CONVEX_SELF_HOSTED_ADMIN_KEY='${config.convexAdminKey}'
PUBLIC_CONVEX_URL=${config.convexUrl}

# Note: NODE_ENV is automatically managed by Vite
# NODE_ENV=development during 'vite dev'
# NODE_ENV=production during 'vite build'
`;

    writeFileSync(envFile, envContent);
    this.log(`Updated ${envFile}`, 'success');
  }

  deployConvex(env) {
    const config = ENVIRONMENTS[env];
    this.log(`Deploying Convex functions to ${config.name}...`);

    if (config.autoStartConvex) {
      this.log('Starting Convex dev server for local development...');
      this.exec('npx convex dev', { continueOnError: true });
    } else {
      const convexCommand = `npx convex deploy --url "${config.convexUrl}" --admin-key "${config.convexAdminKey}"`;
      this.exec(convexCommand);
    }

    this.log('Convex deployment completed', 'success');
  }

  buildApplication() {
    this.log('Building SvelteKit application...');
    this.exec('npm run build');
    this.log('Build completed', 'success');
  }

  deployCloudflare(env) {
    const config = ENVIRONMENTS[env];

    if (config.skipCfDeploy) {
      this.log('Skipping Cloudflare deployment for local environment');
      return;
    }

    this.log(`Deploying to Cloudflare Workers (${config.name})...`);

    // Set environment variables for wrangler.toml
    const envVars = this.getEnvironmentVariables(env);
    const envString = Object.entries(envVars)
      .map(([key, value]) => `${key}="${value}"`)
      .join(' ');

    // Ensure we're using OAuth instead of API token for deployment
    this.exec('unset CLOUDFLARE_API_TOKEN', { continueOnError: true });

    const cfCommand = config.cfEnv
      ? `${envString} npx wrangler deploy --env ${config.cfEnv}`
      : `${envString} npx wrangler deploy --env=""`;

    this.exec(cfCommand);
    this.log('Cloudflare deployment completed', 'success');
  }

  getEnvironmentVariables(env) {
    const config = ENVIRONMENTS[env];
    const envVars = {};

    // Set environment-specific variables
    if (env === 'prod') {
      envVars.PROD_CONVEX_URL = config.convexUrl;
      envVars.PROD_CONVEX_ADMIN_KEY = config.convexAdminKey;
    } else if (env === 'staging') {
      envVars.STAGING_CONVEX_URL = config.convexUrl;
      envVars.STAGING_CONVEX_ADMIN_KEY = config.convexAdminKey;
    }

    // Set common variables
    envVars.CONVEX_SELF_HOSTED_URL = config.convexUrl;
    envVars.PUBLIC_CONVEX_URL = config.convexUrl;
    envVars.CONVEX_SELF_HOSTED_ADMIN_KEY = config.convexAdminKey;

    return envVars;
  }

  showStatus(env) {
    const config = ENVIRONMENTS[env];
    this.log(`\n=== Deployment Status for ${config.name} ===`);
    this.log(`Convex URL: ${config.convexUrl}`);

    if (!config.skipCfDeploy) {
      this.log(`Cloudflare Environment: ${config.cfEnv || 'default'}`);
    }

    this.log('='.repeat(50));
  }

  async run() {
    try {
      switch (this.command) {
        case 'local':
        case 'staging':
        case 'prod':
          await this.deployFull(this.command);
          break;
        case 'convex':
          await this.deployConvexOnly();
          break;
        case 'cf':
        case 'cloudflare':
          await this.deployCloudflareOnly();
          break;
        case 'status':
          this.showStatus(this.environment);
          break;
        default:
          this.showHelp();
      }
    } catch (error) {
      this.log(`Deployment failed: ${error.message}`, 'error');
      process.exit(1);
    }
  }

  async deployFull(env) {
    const config = this.validateEnvironment(env);

    this.log(`\nüöÄ Starting full deployment to ${config.name}...`);

    // Update environment file
    this.updateEnvFile(env);

    // Deploy Convex functions
    if (!this.flags['skip-convex']) {
      this.deployConvex(env);
    }

    // Build and deploy to Cloudflare
    if (!this.flags['skip-cf'] && !config.skipCfDeploy) {
      this.buildApplication();
      this.deployCloudflare(env);
    }

    this.showStatus(env);
    this.log(`\n‚úÖ Deployment to ${config.name} completed successfully!`, 'success');
  }

  async deployConvexOnly() {
    const env = this.environment;
    const config = this.validateEnvironment(env);

    this.log(`\nüîÑ Deploying Convex functions to ${config.name}...`);
    this.updateEnvFile(env);
    this.deployConvex(env);
    this.log(`\n‚úÖ Convex deployment to ${config.name} completed!`, 'success');
  }

  async deployCloudflareOnly() {
    const env = this.environment;
    const config = this.validateEnvironment(env);

    if (config.skipCfDeploy) {
      this.log('Cloudflare deployment not available for local environment', 'warning');
      return;
    }

    this.log(`\n‚òÅÔ∏è Deploying to Cloudflare Workers (${config.name})...`);
    this.buildApplication();
    this.deployCloudflare(env);
    this.log(`\n‚úÖ Cloudflare deployment to ${config.name} completed!`, 'success');
  }

  showHelp() {
    console.log(`
üöÄ Convex + SvelteKit Deployment Manager

Usage:
  node scripts/deploy.js <command> [environment] [flags]

Commands:
  local                 Deploy to local development environment
  staging               Deploy to staging environment
  prod                  Deploy to production environment
  convex [env]          Deploy only Convex functions
  cf [env]              Deploy only to Cloudflare Workers
  status [env]          Show deployment status

Flags:
  --skip-convex         Skip Convex deployment
  --skip-cf             Skip Cloudflare deployment
  --help                Show this help message

Examples:
  node scripts/deploy.js prod
  node scripts/deploy.js staging --skip-convex
  node scripts/deploy.js convex prod
  node scripts/deploy.js cf staging
  node scripts/deploy.js status prod

Environment Variables:
  LOCAL_CONVEX_URL      Local Convex server URL
  LOCAL_CONVEX_ADMIN_KEY Local Convex admin key
  STAGING_CONVEX_URL    Staging Convex server URL
  STAGING_CONVEX_ADMIN_KEY Staging Convex admin key
  PROD_CONVEX_URL       Production Convex server URL
  PROD_CONVEX_ADMIN_KEY Production Convex admin key
`);
  }
}

// Run the deployment manager
const manager = new DeploymentManager();
manager.run().catch(error => {
  console.error('Deployment failed:', error);
  process.exit(1);
});
